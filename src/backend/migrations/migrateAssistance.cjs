const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../config.env') });
const Assistance = require('../models/Assistance.cjs');

const assistanceData = [
    {
        title: "Medical Opinion and Cost Estimations",
        description: "Expert opinions and cost estimates from top healthcare providers.",
        icon: "FaUserMd",
        order: 1
    },
    {
        title: "Pre-Travel Consultations",
        description: "Understand your procedure before traveling with detailed guidance.",
        icon: "FaPlane",
        order: 2
    },
    {
        title: "Visa Assistance",
        description: "Complete medical visa assistance and documentation support.",
        icon: "FaPassport",
        order: 3
    },
    {
        title: "Money Exchange",
        description: "Convenient currency exchange services in your city.",
        icon: "FaMoneyBillWave",
        order: 4
    },
    {
        title: "Interpreters and Translators",
        description: "Fluent professionals to break language barriers at every step.",
        icon: "FaLanguage",
        order: 5
    },
    {
        title: "Transportation Assistance",
        description: "Complimentary airport transfers and local transportation.",
        icon: "FaCar",
        order: 6
    },
    {
        title: "Accommodation Options",
        description: "Near the hospital and matching your budget and needs.",
        icon: "FaBed",
        order: 7
    },
    {
        title: "Admission, Appointment, Pharma Care",
        description: "Full coordination of medical logistics and pharmacy services.",
        icon: "FaCalendarCheck",
        order: 8
    },
    {
        title: "Private Duty Nursing",
        description: "Arrangements of private nursing care as needed.",
        icon: "FaUserNurse",
        order: 9
    },

    {
        title: "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд░рд╛рдп рдФрд░ рд▓рд╛рдЧрдд рдЕрдиреБрдорд╛рди",
        description: "рд╢реАрд░реНрд╖ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рддрд╛рдУрдВ рд╕реЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд░рд╛рдп рдФрд░ рд▓рд╛рдЧрдд рдЕрдиреБрдорд╛рдиред",
        icon: "FaUserMd",
        order: 1,
        language: "HI"
    },
    {
        title: "рдпрд╛рддреНрд░рд╛ рдкреВрд░реНрд╡ рдкрд░рд╛рдорд░реНрд╢",
        description: "рдпрд╛рддреНрд░рд╛ рд╕реЗ рдкрд╣рд▓реЗ рдЕрдкрдиреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭреЗрдВред",
        icon: "FaPlane",
        order: 2,
        language: "HI"
    },
    {
        title: "рд╡реАрдЬрд╛ рд╕рд╣рд╛рдпрддрд╛",
        description: "рдкреВрд░реНрдг рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╡реАрдЬрд╝рд╛ рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реАрдХрд░рдг рд╕рдорд░реНрдердиред",
        icon: "FaPassport",
        order: 3,
        language: "HI"
    },
    {
        title: "рдореБрджреНрд░рд╛ рд╡рд┐рдирд┐рдордп",
        description: "рдЖрдкрдХреЗ рд╢рд╣рд░ рдореЗрдВ рд╕реБрд╡рд┐рдзрд╛рдЬрдирдХ рдореБрджреНрд░рд╛ рд╡рд┐рдирд┐рдордп рд╕реЗрд╡рд╛рдПрдБред",
        icon: "FaMoneyBillWave",
        order: 4,
        language: "HI"
    },
    {
        title: "рдЕрдиреБрд╡рд╛рджрдХ рдФрд░ рджреБрднрд╛рд╖рд┐рдпрд╛",
        description: "рд╣рд░ рдХрджрдо рдкрд░ рднрд╛рд╖рд╛ рдмрд╛рдзрд╛рдУрдВ рдХреЛ рджреВрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдирд┐рдкреБрдг рдкреЗрд╢реЗрд╡рд░ред",
        icon: "FaLanguage",
        order: 5,
        language: "HI"
    },
    {
        title: "рдкрд░рд┐рд╡рд╣рди рд╕рд╣рд╛рдпрддрд╛",
        description: "рдирд┐:рд╢реБрд▓реНрдХ рд╣рд╡рд╛рдИ рдЕрдбреНрдбрд╛ рд╕реНрдерд╛рдирд╛рдВрддрд░рдг рдФрд░ рд╕реНрдерд╛рдиреАрдп рдкрд░рд┐рд╡рд╣рдиред",
        icon: "FaCar",
        order: 6,
        language: "HI"
    },
    {
        title: "рдЖрд╡рд╛рд╕ рд╡рд┐рдХрд▓реНрдк",
        description: "рдЕрд╕реНрдкрддрд╛рд▓ рдХреЗ рдкрд╛рд╕ рдФрд░ рдЖрдкрдХреЗ рдмрдЬрдЯ рд╡ рдЖрд╡рд╢реНрдпрдХрддрд╛рдУрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ред",
        icon: "FaBed",
        order: 7,
        language: "HI"
    },
    {
        title: "рднрд░реНрддреА, рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ, рдлрд╛рд░реНрдорд╛ рдХреЗрдпрд░",
        description: "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд▓реЙрдЬрд┐рд╕реНрдЯрд┐рдХреНрд╕ рдФрд░ рдлрд╛рд░реНрдореЗрд╕реА рд╕реЗрд╡рд╛рдУрдВ рдХрд╛ рдкреВрд░реНрдг рд╕рдордиреНрд╡рдпред",
        icon: "FaCalendarCheck",
        order: 8,
        language: "HI"
    },
    {
        title: "рдирд┐рдЬреА рдирд░реНрд╕рд┐рдВрдЧ рд╕реЗрд╡рд╛",
        description: "рдЖрд╡рд╢реНрдпрдХрддрд╛рдиреБрд╕рд╛рд░ рдирд┐рдЬреА рдирд░реНрд╕рд┐рдВрдЧ рджреЗрдЦрднрд╛рд▓ рдХреА рд╡реНрдпрд╡рд╕реНрдерд╛ред",
        icon: "FaUserNurse",
        order: 9,
        language: "HI"
    }

];

async function migrate() {
    try {
        await mongoose.connect(process.env.ATLAS_URI, {
            dbName: 'healthcare',
            serverSelectionTimeoutMS: 5000
        });
        console.log('тЬЕ MongoDB connected for assistance migration');

        await Assistance.deleteMany();
        console.log('ЁЯЧСя╕П  Cleared existing assistance services');

        const result = await Assistance.insertMany(assistanceData);
        console.log(`ЁЯУе Inserted ${result.length} assistance services`);

        const count = await Assistance.countDocuments();
        console.log(`ЁЯФН Total assistance services in DB: ${count}`);

    } catch (err) {
        console.error('тЭМ Assistance migration failed:', err);
        process.exit(1);
    } finally {
        await mongoose.disconnect();
        console.log('ЁЯЫС MongoDB connection closed');
    }
}

migrate();